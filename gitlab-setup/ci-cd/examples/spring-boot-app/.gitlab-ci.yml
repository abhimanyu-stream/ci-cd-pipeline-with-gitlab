# Spring Boot Application CI/CD Pipeline
# This pipeline builds, tests, and deploys a Spring Boot application

# Include the Java/Maven template
include:
  - project: 'infrastructure/gitlab-templates'
    ref: main
    file: '/ci-cd/templates/java-maven.yml'

# Override default variables
variables:
  APP_NAME: "spring-demo"
  APP_DOMAIN: "example.com"
  MAVEN_OPTS: "-Xmx1g"
  DB_HOST: "mysql.databases.svc.cluster.local"
  DB_PORT: "3306"
  DB_NAME: "springdemo"
  VAULT_ADDR: "http://vault.vault.svc.cluster.local:8200"
  VAULT_PATH: "secret/data/apps/spring-demo"

# Custom job to fetch secrets from Vault before deployment
.vault-secrets:
  before_script:
    - apt-get update && apt-get install -y curl jq
    - |
      # Login to Vault using Kubernetes auth
      VAULT_TOKEN=$(curl -s -X POST \
        -H "X-Vault-Namespace: admin" \
        -d '{"jwt": "'"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"'", "role": "spring-app"}' \
        ${VAULT_ADDR}/v1/auth/kubernetes/login | jq -r '.auth.client_token')
      
      # Export the token for subsequent Vault requests
      export VAULT_TOKEN
      
      # Fetch secrets from Vault
      DB_USERNAME=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" ${VAULT_ADDR}/v1/${VAULT_PATH} | jq -r '.data.data.db_username')
      DB_PASSWORD=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" ${VAULT_ADDR}/v1/${VAULT_PATH} | jq -r '.data.data.db_password')
      
      # Set environment variables for Helm deployment
      export DB_USERNAME
      export DB_PASSWORD

# Override the deploy-dev job to include Vault secrets
deploy-dev:
  extends:
    - .vault-secrets
  script:
    - kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - helm upgrade --install $CI_PROJECT_NAME ./helm-charts/application/ 
      --namespace $KUBERNETES_NAMESPACE 
      --set image.repository=$DOCKER_IMAGE_NAME 
      --set image.tag=$DOCKER_TAG 
      --set ingress.hosts[0].host=$APP_HOST
      --set database.mysql.username=$DB_USERNAME
      --set database.mysql.password=$DB_PASSWORD
      --set database.mysql.host=$DB_HOST
      --set database.mysql.port=$DB_PORT
      --set database.mysql.database=$DB_NAME
      --set config.springProfiles=dev

# Override the deploy-prod job to include Vault secrets
deploy-prod:
  extends:
    - .vault-secrets
  script:
    - kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - helm upgrade --install $CI_PROJECT_NAME ./helm-charts/application/ 
      --namespace $KUBERNETES_NAMESPACE 
      --set image.repository=$DOCKER_IMAGE_NAME 
      --set image.tag=$DOCKER_TAG 
      --set ingress.hosts[0].host=$APP_HOST
      --set database.mysql.username=$DB_USERNAME
      --set database.mysql.password=$DB_PASSWORD
      --set database.mysql.host=$DB_HOST
      --set database.mysql.port=$DB_PORT
      --set database.mysql.database=$DB_NAME
      --set config.springProfiles=prod
      --set autoscaling.minReplicas=2
      --set autoscaling.maxReplicas=5

# Add a job to update GitOps repository
update-gitops:
  stage: deploy
  image: alpine:latest
  variables:
    GITOPS_REPO: "infrastructure/gitops"
    GITOPS_BRANCH: "main"
  before_script:
    - apk add --no-cache git openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -t rsa gitlab.example.com >> ~/.ssh/known_hosts
    - git config --global user.email "ci@example.com"
    - git config --global user.name "GitLab CI"
  script:
    - git clone git@gitlab.example.com:$GITOPS_REPO.git
    - cd gitops
    - |
      # Update the values.yaml file with the new image tag
      sed -i "s/tag: .*/tag: $DOCKER_TAG/" apps/$CI_PROJECT_NAME/values.yaml
      git add apps/$CI_PROJECT_NAME/values.yaml
      git commit -m "Update $CI_PROJECT_NAME to $DOCKER_TAG"
      git push origin $GITOPS_BRANCH
  only:
    - main
  needs:
    - package
  allow_failure: true 