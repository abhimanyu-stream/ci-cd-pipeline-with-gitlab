# Java Maven CI/CD Pipeline Template
# This template defines a CI/CD pipeline for Java/Maven Spring Boot applications

stages:
  - validate
  - build
  - test
  - security
  - package
  - deploy
  - verify

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/${CI_PROJECT_NAME}"
  DOCKER_TAG: "${CI_COMMIT_SHA}"
  SONAR_HOST_URL: "http://sonarqube:9000"
  KUBERNETES_NAMESPACE: "${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}"
  APP_HOST: "${CI_PROJECT_NAME}-${CI_ENVIRONMENT_SLUG}.${APP_DOMAIN}"

# Cache Maven dependencies between pipeline runs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository/

# Validate code and configuration
code-quality:
  stage: validate
  image: maven:3.8-openjdk-17
  script:
    - mvn $MAVEN_CLI_OPTS checkstyle:check
    - mvn $MAVEN_CLI_OPTS spotbugs:check
  allow_failure: true
  artifacts:
    reports:
      codequality: target/checkstyle-result.xml

# Compile and build the application
compile:
  stage: build
  image: maven:3.8-openjdk-17
  script:
    - mvn $MAVEN_CLI_OPTS compile

# Run unit and integration tests
test:
  stage: test
  image: maven:3.8-openjdk-17
  script:
    - mvn $MAVEN_CLI_OPTS test
    - mvn $MAVEN_CLI_OPTS jacoco:report
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, " instructions covered"; print 100*covered/instructions, "% covered" }' target/site/jacoco/jacoco.csv
  coverage: '/([0-9]{1,3}).*%/'
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/site/jacoco/

# Security scanning for vulnerabilities
security-scan:
  stage: security
  image: maven:3.8-openjdk-17
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - mvn $MAVEN_CLI_OPTS dependency-check:check
    - trivy fs --security-checks vuln,config,secret --cache-dir .trivycache/ .
  artifacts:
    reports:
      dependency_scanning: target/dependency-check-report.xml
    paths:
      - target/dependency-check-report.html
    expire_in: 1 week
  allow_failure: true

# SonarQube code analysis
sonarqube:
  stage: security
  image: maven:3.8-openjdk-17
  script:
    - mvn $MAVEN_CLI_OPTS sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  only:
    - main
    - merge_requests
  allow_failure: true

# Build Docker image and package as JAR
package:
  stage: package
  image: maven:3.8-openjdk-17
  services:
    - docker:dind
  before_script:
    - apt-get update && apt-get install -y docker.io
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_TAG -t $DOCKER_IMAGE_NAME:latest .
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
    - docker push $DOCKER_IMAGE_NAME:latest
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week

# Deploy to development environment
deploy-dev:
  stage: deploy
  image: dtzar/helm-kubectl:latest
  environment:
    name: development
    url: https://$CI_ENVIRONMENT_SLUG-$CI_PROJECT_NAME.dev.$APP_DOMAIN
  before_script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - helm upgrade --install $CI_PROJECT_NAME ./helm-charts/application/ 
      --namespace $KUBERNETES_NAMESPACE 
      --set image.repository=$DOCKER_IMAGE_NAME 
      --set image.tag=$DOCKER_TAG 
      --set ingress.hosts[0].host=$APP_HOST
  only:
    - main

# Deploy to production environment
deploy-prod:
  stage: deploy
  image: dtzar/helm-kubectl:latest
  environment:
    name: production
    url: https://$CI_PROJECT_NAME.$APP_DOMAIN
  before_script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - kubectl create namespace $KUBERNETES_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - helm upgrade --install $CI_PROJECT_NAME ./helm-charts/application/ 
      --namespace $KUBERNETES_NAMESPACE 
      --set image.repository=$DOCKER_IMAGE_NAME 
      --set image.tag=$DOCKER_TAG 
      --set ingress.hosts[0].host=$APP_HOST
  only:
    - tags
  when: manual

# Run integration tests against the deployed environment
integration-test:
  stage: verify
  image: maven:3.8-openjdk-17
  script:
    - mvn $MAVEN_CLI_OPTS verify -Dtest.host=$APP_HOST
  only:
    - main
  needs:
    - deploy-dev 