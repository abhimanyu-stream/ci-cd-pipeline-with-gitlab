apiVersion: batch/v1
kind: CronJob
metadata:
  name: k8s-backup
  namespace: kube-system
spec:
  schedule: "0 1 * * *"  # Run daily at 1 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: backup-sa
          restartPolicy: OnFailure
          volumes:
          - name: backup-script
            configMap:
              name: backup-script
              defaultMode: 0755
          - name: backup-volume
            persistentVolumeClaim:
              claimName: backup-pvc
          containers:
          - name: backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - /scripts/backup-k8s-resources.sh
            volumeMounts:
            - name: backup-script
              mountPath: /scripts
            - name: backup-volume
              mountPath: /backup
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: kube-system
data:
  backup-k8s-resources.sh: |
    #!/bin/bash
    # Kubernetes Resource Backup Script
    
    # Set backup directory
    BACKUP_DIR="/backup/k8s-resources/$(date +%Y-%m-%d)"
    mkdir -p $BACKUP_DIR
    
    # Log file
    LOG_FILE="$BACKUP_DIR/backup.log"
    
    echo "Starting Kubernetes resource backup at $(date)" | tee -a $LOG_FILE
    
    # Get all namespaces
    echo "Backing up namespaces..." | tee -a $LOG_FILE
    kubectl get namespaces -o yaml > $BACKUP_DIR/namespaces.yaml
    
    # For each namespace, backup key resources
    for NAMESPACE in $(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}'); do
        NS_DIR="$BACKUP_DIR/$NAMESPACE"
        mkdir -p $NS_DIR
        
        echo "Backing up resources in namespace: $NAMESPACE" | tee -a $LOG_FILE
        
        # Deployments
        kubectl get deployments -n $NAMESPACE -o yaml > $NS_DIR/deployments.yaml
        
        # StatefulSets
        kubectl get statefulsets -n $NAMESPACE -o yaml > $NS_DIR/statefulsets.yaml
        
        # DaemonSets
        kubectl get daemonsets -n $NAMESPACE -o yaml > $NS_DIR/daemonsets.yaml
        
        # ConfigMaps
        kubectl get configmaps -n $NAMESPACE -o yaml > $NS_DIR/configmaps.yaml
        
        # Secrets
        kubectl get secrets -n $NAMESPACE -o yaml > $NS_DIR/secrets.yaml
        
        # Services
        kubectl get services -n $NAMESPACE -o yaml > $NS_DIR/services.yaml
        
        # PersistentVolumeClaims
        kubectl get pvc -n $NAMESPACE -o yaml > $NS_DIR/pvcs.yaml
        
        # Ingresses
        kubectl get ingress -n $NAMESPACE -o yaml > $NS_DIR/ingresses.yaml 2>/dev/null
    done
    
    # Backup PersistentVolumes (cluster-wide resource)
    echo "Backing up PersistentVolumes..." | tee -a $LOG_FILE
    kubectl get pv -o yaml > $BACKUP_DIR/pvs.yaml
    
    # Backup StorageClasses (cluster-wide resource)
    echo "Backing up StorageClasses..." | tee -a $LOG_FILE
    kubectl get storageclass -o yaml > $BACKUP_DIR/storageclasses.yaml
    
    # Backup ClusterRoles and ClusterRoleBindings
    echo "Backing up RBAC resources..." | tee -a $LOG_FILE
    kubectl get clusterroles -o yaml > $BACKUP_DIR/clusterroles.yaml
    kubectl get clusterrolebindings -o yaml > $BACKUP_DIR/clusterrolebindings.yaml
    
    # Compress the backup
    echo "Compressing backup..." | tee -a $LOG_FILE
    BACKUP_ARCHIVE="/backup/k8s-resources-$(date +%Y-%m-%d).tar.gz"
    tar -czf $BACKUP_ARCHIVE -C $(dirname $BACKUP_DIR) $(basename $BACKUP_DIR)
    
    # Clean up old backups (keep last 7 days by default)
    find /backup -name "k8s-resources-*.tar.gz" -type f -mtime +7 -delete
    
    echo "Backup completed at $(date)" | tee -a $LOG_FILE
    echo "Backup saved to: $BACKUP_ARCHIVE" | tee -a $LOG_FILE
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-sa
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backup-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backup-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backup-role
subjects:
- kind: ServiceAccount
  name: backup-sa
  namespace: kube-system
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: kube-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard  # Change this to your actual storage class 