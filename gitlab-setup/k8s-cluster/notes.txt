I've successfully added the Kubernetes cluster setup scripts to your gitlab-setup directory structure. Here's what I did:
Created a new k8s-cluster directory in the gitlab-setup folder
Added the following scripts to this directory:
all_nodes.sh - Bootstrap script for EC2 instances
init-k8s-cluster.sh - Kubernetes initialization script
setup-k8s-cluster.sh - EC2 instance creation script
setup-cicd-ec2.sh - CI/CD EC2 instance creation script
Created a dedicated README.md file in the k8s-cluster directory, which explains:
Purpose of each script
Usage instructions
Important notes about Kubernetes cluster setup
Updated the main README.md file to include:
Directory structure overview with the new k8s-cluster directory
Step-by-step instructions for setting up the Kubernetes cluster
Updated script summary to include the Kubernetes scripts
Added troubleshooting section for Kubernetes cluster issues
This organization makes it easy to understand and execute the complete setup process, from creating the Kubernetes cluster to setting up the CI/CD infrastructure.
The complete gitlab-setup directory now provides a comprehensive solution for setting up a production-ready Kubernetes cluster with a fully integrated CI/CD pipeline using GitLab, Jenkins, Trivy, and Nexus.



I've updated your all_nodes.sh script in the gitlab-setup/k8s-cluster directory with important modern improvements from the alternate version:
Key Improvements to all_nodes.sh:
IPv4 Forwarding Configuration
Added proper network forwarding setup required for Kubernetes pods
Applied immediately with sysctl --system
Switched from Docker to containerd
Now uses containerd directly instead of full Docker installation
This follows Kubernetes best practices as Docker support was deprecated
SystemdCgroup Configuration
Set SystemdCgroup=true in containerd config
This is required for proper kubelet and pod functionality
Updated Kubernetes Repository
Now uses the latest pkgs.k8s.io repo instead of deprecated apt.kubernetes.io
Follows latest Kubernetes installation guidance
Better Command Structure
Added sudo to commands as needed
Fixed command formatting issues
Added confirmation echo at the end
README.md Updates:
I also updated the README.md file in the k8s-cluster directory to:
Reflect the changes to the all_nodes.sh script
Provide more detailed instructions for AWS Load Balancer setup
Include example join commands for both master and worker nodes
Note the important changes regarding containerd and needed configurations
These updates will make your Kubernetes cluster more reliable and follow current best practices. The containerd runtime is more efficient and is the recommended approach for modern Kubernetes deployments.

# Additional EC2 Instances Configuration

This document provides information about the additional EC2 instances configured for the infrastructure, beyond the Kubernetes cluster setup.

## EC2 Instances Overview

1. Monitoring Instance (ELK Stack + Grafana)
   - Type: t3.large 
   - Storage: 50GB EBS volume
   - Ports: 9200, 9300 (Elasticsearch), 5601 (Kibana), 5044 (Logstash), 3000 (Grafana)
   - Files: setup-monitoring-ec2.sh, install-monitoring.sh

2. Database Instance (MySQL + MongoDB)
   - Type: t3.medium
   - Storage: 50GB EBS volume
   - Ports: 3306 (MySQL), 27017 (MongoDB)
   - Files: setup-databases-ec2.sh, install-databases.sh

3. Spring Boot Application Instance
   - Type: t3.medium
   - Ports: 8080 (Spring Boot app)
   - Files: setup-springboot-ec2.sh, install-springboot.sh

## Setup Order

For proper deployment, follow this order:
1. Deploy Kubernetes cluster (using the existing cluster setup scripts)
2. Deploy Monitoring instance (ELK Stack + Grafana)
3. Deploy Database instance (MySQL + MongoDB)
4. Deploy Spring Boot application instance
5. Configure connections between instances:
   - On Database server: Run `/root/configure-elasticsearch.sh <monitoring-server-ip>`
   - On Spring Boot server: 
     - Run `/root/configure-elasticsearch.sh <monitoring-server-ip>`
     - Run `/root/configure-databases.sh <database-server-ip>`

## Integration Points

1. ELK Stack Integration
   - Elasticsearch serves as the central log repository
   - Filebeat on database and application servers sends logs to Elasticsearch
   - Kibana provides visualization and exploration of logs
   - Grafana offers advanced dashboards connected to Elasticsearch

2. Database Integration
   - MySQL and MongoDB are installed on the same instance
   - Spring Boot application can connect to both databases
   - Test data is pre-populated in both databases
   - Database logs are sent to ELK stack for monitoring

3. Spring Boot Application
   - Runs as Docker containers
   - Connects to both MySQL and MongoDB
   - Sample application demonstrates database connectivity
   - Logs are sent to ELK stack for monitoring

## Security Considerations

For production use, consider the following security enhancements:
- Restrict security group rules to only allow traffic from necessary sources
- Set up proper password management and avoid hardcoded credentials
- Enable SSL/TLS for all services
- Implement proper authentication for Elasticsearch, Kibana, and Grafana
- Set up database backups

